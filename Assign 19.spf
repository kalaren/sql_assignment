<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>testdb</string>
			<key>host</key>
			<string>localhost</string>
			<key>name</key>
			<string>localhost</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPSocketConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8</string>
			<key>contentFilter</key>
			<dict/>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGNjdYJHZlcnNpb25YJG9iamVjdHNZJGFy
			Y2hpdmVyVCR0b3ASAAGGoK0HCBUWFxgZHSQoLDA0VSRudWxs0wkK
			CwwQFFdOUy5rZXlzWk5TLm9iamVjdHNWJGNsYXNzow0OD4ACgAOA
			BKMREhOABYAGgAiADFR0eXBlVHJvd3NUa2V5c18QJlNlbGVjdGlv
			bkRldGFpbFR5cGVQcmltYXJ5S2V5ZWREZXRhaWxz0wkKCxobHKCg
			gAfSHh8gIVokY2xhc3NuYW1lWCRjbGFzc2VzXxATTlNNdXRhYmxl
			RGljdGlvbmFyeaMgIiNcTlNEaWN0aW9uYXJ5WE5TT2JqZWN00goL
			JSehJoAJgAvSCykqK1lOUy5zdHJpbmeAClJpZNIeHy0uXxAPTlNN
			dXRhYmxlU3RyaW5noy0vI1hOU1N0cmluZ9IeHzEyXk5TTXV0YWJs
			ZUFycmF5ozEzI1dOU0FycmF50h4fIjWiIiNfEA9OU0tleWVkQXJj
			aGl2ZXLRODlUZGF0YYABAAgAEQAaACMALQAyADcARQBLAFIAWgBl
			AGwAcAByAHQAdgB6AHwAfgCAAIIAhwCMAJEAugDBAMIAwwDFAMoA
			1QDeAPQA+AEFAQ4BEwEVARcBGQEeASgBKgEtATIBRAFIAVEBVgFl
			AWkBcQF2AXkBiwGOAZMAAAAAAAACAQAAAAAAAAA6AAAAAAAAAAAA
			AAAAAAABlQ==
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{0, 0}, {745, 460}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string>#
# Dump of table orders
# ------------------------------------------------------------

DROP TABLE IF EXISTS `orders`;

CREATE TABLE `orders` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) unsigned NOT NULL,
  `placed` datetime DEFAULT NULL,
  `filled` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `orders` WRITE;
/*!40000 ALTER TABLE `orders` DISABLE KEYS */;

INSERT INTO `orders` (`id`, `user_id`, `placed`, `filled`)
VALUES
  (1,1,'2013-05-22 16:13:35',0);

/*!40000 ALTER TABLE `orders` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table orders_products
# ------------------------------------------------------------

DROP TABLE IF EXISTS `orders_products`;

CREATE TABLE `orders_products` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `order_id` int(11) unsigned NOT NULL,
  `product_id` int(11) unsigned NOT NULL,
  `quantity` int(2) unsigned NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `orders_products` WRITE;
/*!40000 ALTER TABLE `orders_products` DISABLE KEYS */;

INSERT INTO `orders_products` (`id`, `order_id`, `product_id`, `quantity`)
VALUES
  (1,1,1,1),
	(2,1,2,1);

/*!40000 ALTER TABLE `orders_products` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table products
# ------------------------------------------------------------

DROP TABLE IF EXISTS `products`;

CREATE TABLE `products` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL DEFAULT '',
  `descirption` text,
  `cost` int(10) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `products` WRITE;
/*!40000 ALTER TABLE `products` DISABLE KEYS */;

INSERT INTO `products` (`id`, `name`, `descirption`, `cost`)
VALUES
	(1,'iPhone','An iPhone!',49999),
	(2,'Nexus 4','A Nexus 4!',30999),
	(3,'iPad','An iPad!',39999);

/*!40000 ALTER TABLE `products` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table shopping_carts
# ------------------------------------------------------------

DROP TABLE IF EXISTS `shopping_carts`;

CREATE TABLE `shopping_carts` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(11) unsigned NOT NULL,
  `product_id` int(11) unsigned NOT NULL,
  `quantity` int(2) NOT NULL DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `shopping_carts` WRITE;
/*!40000 ALTER TABLE `shopping_carts` DISABLE KEYS */;

INSERT INTO `shopping_carts` (`id`, `user_id`, `product_id`, `quantity`)
VALUES
	(1,1,1,1),
	(2,1,2,2),
	(3,1,3,1),
	(4,3,1,1);

/*!40000 ALTER TABLE `shopping_carts` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table users
# ------------------------------------------------------------

DROP TABLE IF EXISTS `users`;

CREATE TABLE `users` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `email` varchar(255) NOT NULL DEFAULT '',
  `password` varchar(32) NOT NULL DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `users` WRITE;
/*!40000 ALTER TABLE `users` DISABLE KEYS */;

INSERT INTO `users` (`id`, `email`, `password`)
VALUES
	(1,'dave@bitmakerlabs.com','962012d09b8170d912f0669f6d7d9d07'),
	(2,'will@bitmakerlabs.com','912ec803b2ce49e4a541068d495ab570'),
	(3,'rob@gmail.com','fd2cc6c54239c40495a0d3a93b6380eb');

/*!40000 ALTER TABLE `users` ENABLE KEYS */;
UNLOCK TABLES;

INSERT INTO `products` (`id`, `name`, `descirption`, `cost`)
VALUES 
(4, 'Eric Phone', 'mine', 9123123 );

INSERT INTO `products` 
(`id`, `name`, `descirption`, `cost`)
VALUES 
(5, 'Eric Phone', 'mine', 9123123 );

select email from users;

select email from users where id = (select user_id from orders where id = (select order_id from orders_products where orders_products.product_id = 1));



select email from users where id = (select user_id from orders where id = (select order_id from orders_products where 30000 &lt; (select sum()) ));

SELECT users.id 
FROM users
WHERE users.id = (select from order);
select order_id as id, sum(products.cost* orders_products.quantity) as total from products, orders_products where orders_products.product_id = products.id;


select user_id, sum(products.cost * orders_products.quantity)
from orders 
inner join orders_products
on orders.id = orders_products.order_id
inner join products 
on orders_products.product_id = products.id
where products.cost * orders_products.quantity &gt; 30000</string>
			<key>table</key>
			<string>orders_products</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>202</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>select email from users</string>
		<string>select email from users

select email from users where id = (select user_id from orders where id = (select order_id from orders_products where orders_products.product_id = 1))</string>
		<string>select email from users where id = (select user_id from orders where id = (select order_id from orders_products where orders_products.product_id = 1))</string>
		<string>select email from users where id = (select user_id from orders where id = (select order_id from orders_products where orders_products.product_id = 1,1))</string>
		<string>select order_id as id, sum(products.cost* orders_products.quantity) as total from products, orders_products where orders_products.product_id = products.id</string>
		<string>select user_id, sum(products.cost * orders_products.quantity)
from orders 
inner join orders_products
on orders.id = orders_products.order_id
inner join products 
on orders_products.product_id = products.id
where products.cost * orders_products.quantity &gt; 30000</string>
		<string>select user_id
from orders 
inner join orders_products
on orders.id = orders_products.order_id
inner join products 
on orders_products.product_id = products.id
where products.cost * orders_products.quantity &gt; 30000</string>
		<string>select user_id
from orders 
inner join orders_products
on orders.id = orders_products.order_id
inner join products 
on orders_products.product_id = products.id
where sum(products.cost * orders_products.quantity) &gt; 30000</string>
		<string>select user_id, sum(products.cost * orders_products.quantity) as total
from orders 
inner join orders_products
on orders.id = orders_products.order_id
inner join products 
on orders_products.product_id = products.id
where total &gt; 30000</string>
		<string>select user_id, sum(products.cost * orders_products.quantity)
from orders 
inner join orders_products
on orders.id = orders_products.order_id
inner join products 
on orders_products.product_id = products.id</string>
		<string>select products.cost
from orders 
inner join orders_products
on orders.id = orders_products.order_id
inner join products 
on orders_products.product_id = products.id</string>
		<string>select orders.user_id
from orders 
inner join orders_products
on orders.id = orders_products.order_id
inner join products 
on orders_products.product_id = products.id</string>
		<string>select orders.user_id
from orders 
inner join orders_products
on orders.id = orders_products.order_id
inner join products 
on orders_products.product_id = products.id
where sum(products.cost* orders_products.quantity) &gt; 30000</string>
		<string>select *
from orders 
inner join orders_products
on orders.id = orders_products.order_id
inner join products 
on orders_products.product_id = products.id</string>
		<string>select *
from orders 
inner join orders_products
on orders.id = orders_products.order_id</string>
		<string>select orders.user_id
from orders 
inner join orders_products
on orders.id = orders_products.order_id</string>
		<string>select order_id as id, sum(products.cost* orders_products.quantity) as total from products, orders_products where orders_products.product_id = products.id as</string>
		<string>select order_id as id, sum(products.cost* orders_products.quantity) as total from products, orders_products as custom where orders_products.product_id = products.id as</string>
		<string>select order_id as id, sum(products.cost* orders_products.quantity) as total from products, orders_products as  where orders_products.product_id = products.id as</string>
		<string>select order_id as id, sum(products.cost* orders_products.quantity) as total from (products, orders_products) as custom where orders_products.product_id = products.id as</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.6.10</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
